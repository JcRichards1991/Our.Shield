!function(e){angular.module("umbraco").controller("Shield.Editors.UmbracoAccess.EditController",["$scope","notificationsService","ShieldUmbracoAccessResource",function(e,i,r){e.loading=0,e.error=null,e.newIp={Ip:""},e.init=function(){e.loading++,r.GetConfiguration().then(function(r){null===r.data||angular.isUndefined(r.data)?(i.error("Something went wrong getting the configuration, the error has been logged"),e.configuration={backendAccessUrl:"~/umbraco",statusCode:"404",unauthorisedUrlType:0,unauthorisedUrl:"/404",unauthorisedUrlXPath:"",unauthorisedUrlContentPicker:"",ipAddresses:[],isDirty:!1}):e.configuration=r.data,e.properties=[{label:"Backend Office Access URL",description:"The URL used to access the backend office (Umbraco)",view:"textbox",alias:"backOfficeAccessUrl",value:e.configuration.backendAccessUrl,visible:!0},{label:"Status Code",description:"The Status code to display to the user when accessing the Backend Access URL from a disallowed IP address",view:"integer",alias:"statusCode",value:e.configuration.statusCode,visible:!0},{label:"Unauthorised Url Type",description:"The type of selector for the Unautorised Url",view:"dropdown",alias:"unauthorisedUrlType",config:{items:[{value:"String",id:0},{value:"XPath",id:1},{value:"Content Picker",id:2}],multiple:!1},value:e.configuration.unauthorisedUrlType,visible:!0},{label:"Unautorised Url",description:"The URL to redirect the user to when from a disallowed IP Address",view:"textbox",alias:"unauthorisedUrl",value:e.configuration.unauthorisedUrl,visible:0===e.configuration.unauthorisedUrlType},{label:"Unautorised Url by XPath",description:"The XPath to the content node to redirect the user to when from a disallowed IP Address",view:"textbox",alias:"unauthorisedUrlXPath",value:e.configuration.unauthorisedUrlXPath,visible:1===e.configuration.unauthorisedUrlType},{label:"Unauthorised Url by Content Picker",description:"Select the content node to redirect the user to when from a disallowed IP Address",view:"contentpicker",alias:"unauthorisedUrlContentPicker",config:{multiPicker:"0",entityType:"Document",startNode:{query:"",type:"content",id:-1},filter:"",minNumber:0,maxNumber:1},value:e.configuration.unauthorisedUrlContentPicker,visible:2===e.configuration.unauthorisedUrlType},{label:"Allowed IPs",description:"The allowed IPs that can access the Backend Access Url. Localost (127.0.0.1) is added by default.",view:"/App_Plugins/Shield/backoffice/PropertyEditors/allowedIps.html",alias:"allowedIPs",config:{},value:e.configuration.ipAddresses,visible:!0}];var t=angular.filter(e.properties,{alias:"unauthorisedUrlType"},!0);e.$watch(t,function(i,r){var t=$filter("filter")(e.properties,{alias:"unauthorisedUrl"},!0),a=$filter("filter")(e.properties,{alias:"unauthorisedUrlXPath"},!0),o=$filter("filter")(e.properties,{alias:"unauthorisedUrlContentPicker"},!0);switch(i.value){case 0:t.visible=!0,a.visible=!1,o=!1;break;case 1:t.visible=!1,a.visible=!0,o=!1;break;case 2:t.visible=!1,a.visible=!1,o=!0}}),e.loading--})},e.submitUmbracoAccess=function(){e.loading++,angular.forEach(e.properties,function(i,r){switch(i.alias){case"backOfficeAccessUrl":e.configuration.backendAccessUrl=newVal;break;case"statusCode":e.configuration.statusCode=newVal;break;case"unauthorisedUrlType":e.configuration.unauthorisedUrlType=newVal;break;case"unauthorisedUrl":e.configuration.unauthorisedUrl=newVal;break;case"unauthorisedUrlXPath":e.configuration.unauthorisedUrlXPath=newVal;break;case"unauthorisedUrlContentPicker":e.configuration.unauthorisedUrlContentPicker=newVal;break;case"allowedIPs":e.configuration.ipAddresses=newVal}}),r.PostConfiguration(e.configuration).then(function(r){"null"===r.data||void 0===r.data||"false"===r.data?i.error("Something went wrong, the error has been logged"):(i.success("Successfully updated"),e.defaultConfiguration={backendAccessUrl:e.configuration.backendAccessUrl},e.displayUmbracoAccessWarningMessage=!1),e.loading--})}}]),angular.module("umbraco.resources").factory("ShieldUmbracoAccessResource",["$http",function(e){var i="backoffice/Shield/UmbracoAccessApi/";return{PostConfiguration:function(r){return e.post(i+"PostConfiguration",angular.toJson(r))},GetConfiguration:function(){return e.get(i+"GetConfiguration")}}}]),angular.module("umbraco").controller("Shield.PropertyEditors.AllowedIpsController",["$scope",function(e){e.ips=[]}])}(window);