!function(e){angular.module("umbraco").controller("Shield.Editors.UmbracoAccess.EditController",["$scope","notificationsService","ShieldUmbracoAccessResource",function(e,i,t){e.loading=0,e.error=null,e.newIp={Ip:""},e.init=function(){e.loading++,t.GetConfiguration().then(function(t){null===t.data||angular.isUndefined(t.data)?(i.error("Something went wrong getting the configuration, the error has been logged"),e.configuration={backendAccessUrl:"~/umbraco",statusCode:"404",unauthorisedUrlType:0,unauthorisedUrl:"/404",unauthorisedUrlXPath:"",unauthorisedUrlContentPicker:"",ipAddresses:[],isDirty:!1}):e.configuration=t.data,e.properties=[{label:"Backend Office Access URL",description:"The URL used to access the backend office (Umbraco)",view:"textbox",alias:"backOfficeAccessUrl",value:e.configuration.backendAccessUrl,visible:!0},{label:"Status Code",description:"The Status code to display to the user when accessing the Backend Access URL from a disallowed IP address",view:"integer",alias:"statusCode",value:e.configuration.statusCode,visible:!0},{label:"Unauthorised Url Type",description:"The type of selector for the Unautorised Url",view:"dropdown",alias:"unauthorisedUrlType",config:{items:[{value:"String",id:0},{value:"XPath",id:1},{value:"Content Picker",id:2}],multiple:!1},value:e.configuration.unauthorisedUrlType,visible:!0},{label:"Unautorised Url",description:"The URL to redirect the user to when from a disallowed IP Address",view:"textbox",alias:"unauthorisedUrl",value:e.configuration.unauthorisedUrl,visible:0===e.configuration.unauthorisedUrlType},{label:"Unautorised Url by XPath",description:"The XPath to the content node to redirect the user to when from a disallowed IP Address",view:"textbox",alias:"unauthorisedUrlXPath",value:e.configuration.unauthorisedUrlXPath,visible:1===e.configuration.unauthorisedUrlType},{label:"Unauthorised Url by Content Picker",description:"Select the content node to redirect the user to when from a disallowed IP Address",view:"contentpicker",alias:"unauthorisedUrlContentPicker",config:{multiPicker:"0",entityType:"Document",startNode:{query:"",type:"content",id:-1},filter:"",minNumber:0,maxNumber:1},value:e.configuration.unauthorisedUrlContentPicker,visible:2===e.configuration.unauthorisedUrlType}],angular.forEach(e.properties,function(i,t){e.$watch("properties["+t+"].value",function(t,r){switch(i.alias){case"backOfficeAccessUrl":e.configuration.backendAccessUrl=t;break;case"statusCode":e.configuration.statusCode=t;break;case"unauthorisedUrlType":e.configuration.unauthorisedUrlType=t,angular.forEach(e.properties,function(e,i){switch(t){case 0:"unauthorisedUrlXPath"===e.alias||"unauthorisedUrlContentPicker"===e.alias?e.visible=!1:"unauthorisedUrl"===e.alias&&(e.visible=!0);break;case 1:"unauthorisedUrl"===e.alias||"unauthorisedUrlContentPicker"===e.alias?e.visible=!1:"unauthorisedUrlXPath"===e.alias&&(e.visible=!0);break;case 2:"unauthorisedUrl"===e.alias||"unauthorisedUrlXPath"===e.alias?e.visible=!1:"unauthorisedUrlContentPicker"===e.alias&&(e.visible=!0)}});break;case"unauthorisedUrl":e.configuration.unauthorisedUrl=t;break;case"unauthorisedUrlXPath":e.configuration.unauthorisedUrlXPath=t;break;case"unauthorisedUrlContentPicker":e.configuration.unauthorisedUrlContentPicker=t}})}),e.loading--})},e.addIpAddress=function(){e.configuration.push(e.newIp),e.newIp.Ip=""},e.submitUmbracoAccess=function(){e.loading++,t.PostConfiguration(e.configuration).then(function(t){"null"===t.data||void 0===t.data||"false"===t.data?i.error("Something went wrong, the error has been logged"):(i.success("Successfully updated"),e.defaultConfiguration={backendAccessUrl:e.configuration.backendAccessUrl},e.displayUmbracoAccessWarningMessage=!1),e.loading--})}}]),angular.module("umbraco.resources").factory("ShieldUmbracoAccessResource",["$http",function(e){var i="backoffice/Shield/UmbracoAccessApi/";return{PostConfiguration:function(t){return e.post(i+"PostConfiguration",angular.toJson(t))},GetConfiguration:function(){return e.get(i+"GetConfiguration")}}}])}(window);